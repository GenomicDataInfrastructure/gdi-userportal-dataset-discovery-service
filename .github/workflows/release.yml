# SPDX-FileCopyrightText: 2024 PNED G.I.E.
#
# SPDX-License-Identifier: Apache-2.0

name: Publish Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version increment (major, minor, patch)'
        required: true
        default: 'patch'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/genomicdatainfrastructure/gdi-userportal-dataset-discovery-service
  REPOSITORY_URL: ${{ github.server_url }}/${{ github.repository }}
  BUILD_DATE: ""

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tagging.outputs.new_tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch Latest Tag and Increment Version
        id: tagging
        run: |
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1 || echo "v1.0.0")
          echo "Latest tag: $LATEST_TAG"
          IFS='.' read -r MAJOR MINOR PATCH <<<"${LATEST_TAG//v/}"
          
          echo "Updating : ${{ github.event.inputs.version }} version"
          
          case "${{ github.event.inputs.version }}" in
            major) ((MAJOR++)); MINOR=0; PATCH=0 ;;
            minor) ((MINOR++)); PATCH=0 ;;
            patch|*) ((PATCH++)) ;;
          esac

          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin "$NEW_TAG"
          
          echo "New tag pushed: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

  update-changelog:
    runs-on: ubuntu-latest
    needs: versioning
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update CHANGELOG.md
        run: |
          gem install github_changelog_generator
          github_changelog_generator -u $GITHUB_REPOSITORY_OWNER -p $(basename $GITHUB_REPOSITORY)
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for release ${{ needs.versioning.outputs.new_tag }}"
          git push

  ort:
    runs-on: ubuntu-latest
    needs: update-changelog
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: oss-review-toolkit/ort-ci-github-action@v1
        with:
          allow-dynamic-versions: "true"
          fail-on: "issues"
          run: "cache-dependencies,cache-scan-results,labels,analyzer,evaluator,advisor,reporter,upload-results"

  publish-release:
    runs-on: ubuntu-latest
    needs: ort
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.versioning.outputs.new_tag }}
          name: Release ${{ needs.versioning.outputs.new_tag }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

  publish-docker-image:
    runs-on: ubuntu-latest
    needs: publish-release
    permissions:
      contents: read
      packages: write
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up GraalVM JDK 21
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: "21"

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Build Project
        run: mvn package -Dnative

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=schedule,priority=400
            type=ref,event=branch,priority=600
            type=ref,event=pr,priority=500
            type=semver,pattern={{version}},priority=700
            type=semver,pattern={{major}}.{{minor}},priority=900
            type=semver,pattern={{major}},priority=800
            type=sha,priority=1000
          labels: |
            version=${{ needs.versioning.outputs.new_tag }}
            org.opencontainers.image.version=${{ needs.versioning.outputs.new_tag }}
            vcs-ref=${{env.GITHUB_SHA}}
            build-date=${{env.BUILD_DATE}}
            org.opencontainers.image.created=${{env.BUILD_DATE}}
            release=${{env.BUILD_DATE}}
            org.opencontainers.image.url=${{env.REPOSITORY_URL}}
            org.opencontainers.image.source=${{env.REPOSITORY_URL}}
            org.opencontainers.image.documentation=${{env.REPOSITORY_URL}}
            help=${{env.REPOSITORY_URL}}
            url=${{env.REPOSITORY_URL}}
            name=${{env.IMAGE_NAME}}

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: ${{ needs.versioning.outputs.new_tag }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: "${{ needs.versioning.outputs.new_tag }}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ needs.versioning.outputs.new_tag }}
          labels: ${{ steps.meta.outputs.labels }}
