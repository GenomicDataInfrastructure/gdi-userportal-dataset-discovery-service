# SPDX-FileCopyrightText: 2024 PNED G.I.E.
#
# SPDX-License-Identifier: Apache-2.0

openapi: 3.0.3
info:
  title: Beacon V2 API
  version: 2.0.0
  description: API for searching on Beacon Network.
servers:
  - url: /
paths:
  /v2.0.0/g_variants:
    post:
      description: Get a Beacon response for genomic variations
      operationId: postGenomicVariationsRequest
      tags:
        - GVariants
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeaconRequest'
        required: true
      responses:
        '200':
          description: A list of genomic variations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeaconResponse"
      security:
        - beacon_auth:
            - read:beacon


components:
  securitySchemes:
    beacon_auth:
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow.
      flows:
        authorizationCode:
          tokenUrl: https://api.example.com/oauth2/token
          authorizationUrl: https://api.example.com/oauth2/authorize
          scopes:
            read:beacon: read beacon
  schemas:
    BeaconRequest:
      type: object
      properties:
        meta:
          type: object
          properties:
            apiVersion:
              type: string
              title: API Version
              default: 2.0
        query:
          type: object
          properties:
            filters:
              type: array
              title: Filters
              items:
                $ref: "#/components/schemas/BeaconRequestQueryFilter"
              default: [ ]
            includeResultsetResponses:
              type: string
              title: Include Resultset Responses
              enum:
                - ALL
                - HIT
                - MISS
                - NONE
              default: HIT
            pagination:
              type: object
              properties:
                skip:
                  type: integer
                  title: Skip
                  minimum: 0
                  default: 0
                  example: 0
                limit:
                  type: integer
                  title: Limit
                  minimum: 0
                  default: 1
                  example: 10
                currentPage:
                  type: string
                  example: ab0sc&fe1dd
                nextPage:
                  type: string
                  example: ab0sc&fe1dd
                previousPage:
                  type: string
                  example: ab0sc&fe1dd
            requestParameters:
              type: object
              description: "A map from string keys to arbitrary JSON values."
              additionalProperties: true
            requestedGranularity:
              type: string
              title: Requested Granularity
              enum:
                - boolean
                - count
                - record
              default: boolean
            testMode:
              description: >-
                Used for indicating that a request or response is done in a test context e.g. for compliance testing 
                i.e. to evaluate the acceptance/understanding of a request and the structure of the returned response by 
                the Beacon instance. A TRUE `testMode` parameter DOES NOT require that the Beacon instance is a test 
                instance, but that this specific request-response cycle is a testing one. When `true` the Beacon instance 
                MUST respond the request but it SHOULD use virtual or non-sensitive data. Here, what is being evaluated 
                is the acceptance/understanding of a request and the structure of the returned response by the Beacon 
                instance.
              type: boolean
              title: Test Mode
              default: false
    BeaconRequestQueryFilter:
      anyOf:
        - "$ref": "#/components/schemas/OntologyFilter"
        - "$ref": "#/components/schemas/AlphanumericFilter"
        - "$ref": "#/components/schemas/CustomFilter"

    AlphanumericFilter:
      type: object
      description: Filter results based on operators and values applied to alphanumeric fields.
      required:
        - id
        - operator
        - value
      properties:
        id:
          description: Field identifier to be queried.
          example: ageOfOnset
          type: string
        operator:
          default: "="
          description: Defines how the value relates to the field `id`.
          enum:
            - "="
            - "<"
            - ">"
            - "!"
            - ">="
            - "<="
          example: ">"
          type: string
        scope:
          description: The entry type to which the filter applies
          example: individuals
          type: string
        value:
          description: Alphanumeric search term to be used within the query which can contain wildcard characters (%)
            to denote any number of unknown characters.  Values can be associated with units if applicable.
          example: P70Y
          type: string
    CustomFilter:
      type: object
      description: Filter results to include records that contain a custom term defined by this Beacon.
      required:
        - id
      properties:
        id:
          description: Custom filter terms should contain a unique identifier.
          example: demographic.ethnicity:asian
          type: string
        scope:
          description: The entry type to which the filter applies
          example: individuals
          type: string
    OntologyFilter:
      type: object
      description: Filter results to include records that contain a specific ontology term.
      required:
        - id
      properties:
        id:
          description: Term ID to be queried, using CURIE syntax where possible.
          example: HP:0002664
          type: string
        includeDescendantTerms:
          default: true
          description: Define if the Beacon should implement the ontology hierarchy, thus query the descendant terms of `id`.
          type: boolean
        scope:
          description: The entry type to which the filter applies
          example: biosamples
          type: string
        similarity:
          default: exact
          description: Allow the Beacon to return results which do not match the filter exactly, but do match to a certain
            degree of similarity. The Beacon defines the semantic similarity model implemented and how to apply
            the thresholds of 'high', 'medium' and 'low' similarity.
          enum:
            - exact
            - high
            - medium
            - low
          type: string
    BeaconResponse:
      type: object
      properties:
        response:
          $ref: "#/components/schemas/BeaconResponseContent"
    BeaconResponseContent:
      type: object
      properties:
        resultSets:
          type: array
          title: Result Sets
          items:
            $ref: "#/components/schemas/BeaconResultSet"
    BeaconResultSet:
      type: object
      properties:
        beaconId:
          type: string
          title: Beacon ID
        id:
          type: string
          title: Dataset ID
        exists:
          type: boolean
          title: Exists
        resultsCount:
          type: integer
          title: Results Count
        setType:
          type: string
          title: Set Type
        results:
          type: array
          items:
            $ref: "#/components/schemas/Result"
    Result:
      type: object
      properties:
        frequencyInPopulations:
          type: array
          items:
            $ref: "#/components/schemas/FrequencyInPopulations"
        identifiers:
          type: object
          properties:
            genomicHGVSId:
              type: string
        variantInternalId:
          type: string
    FrequencyInPopulations:
      type: object
      properties:
        frequencies:
          type: array
          items:
            $ref: "#/components/schemas/Frequencies"
        source:
          description: The study
          type: string
        sourceReference:
          description: A reference to further documentation or details.
          type: string
        version:
          description: version of the source data.
          type: string
    Frequencies:
      type: object
      properties:
        alleleFrequency:
          description: Allele frequency between 0 and 1.
          type: number
        population:
          description: A name for the population. A population could an ethnic,
            geographical one or just the `members`of a study.
          type: string
        alleleCount:
          type: number
        alleleNumber:
          type: number
        alleleCountHomozygous:
          type: number
        alleleCountHeterozygous:
          type: number


